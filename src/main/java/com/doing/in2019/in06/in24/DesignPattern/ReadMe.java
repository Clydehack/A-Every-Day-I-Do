package com.doing.in2019.in06.in24.DesignPattern;

public class ReadMe {

	/**
	 * 设计模式 DesignPattern -- 和习惯用法 Idiom
	 * 
	 * 		Builder	- 构建者模式、建造者模式
	 * 			
	 * 			本质：
	 * 				使用多个简单对象一步一步构建成复杂对象。
	 * 				这些简单对象基本不变，而组合方式经常变化。
	 * 				与工厂模式的区别是：建造者模式更加关注与零件装配的顺序！！
	 * 
	 * 			应用实例：
	 * 				1.肯德基有很多不变的产品，炸鸡、薯条、汉堡、可乐。而它的套餐经常变化，是单纯的组合不同。
	 * 				2.电脑由CPU、GPU、主板、内存、硬盘、等等等组成; 各个部件经常剧烈变化，但是组成电脑的方式却相对稳定。
	 * 				3.Java中的StringBuilder
	 * 
	 * 			使用场景： 
	 * 				1.要生成的对象具有复杂的内部结构	- 比如电脑
	 * 				2.要生成的对象n内部属性本身相互依赖	- ？
	 * 			
	 * 			日常习惯用法：
	 * 				
	 * 
	 * 
	 * 		Decorator - 装饰器模式
	 * 		
	 * 			本质：
	 * 				动态地给一个对象添加一些额外的职责。
	 * 				就增加功能来说，装饰器模式相比生成子类更为灵活。
	 * 
	 * 			应用实例：
	 * 				孙悟空有 72 变，当他变成"庙宇"后，他的根本还是一只猴子，但是他又有了庙宇的功能。
	 * 			
	 * 			使用场景： 
	 * 				1.扩展一个类的功能。
	 * 				2.动态增加功能，动态撤销。
	 */
}