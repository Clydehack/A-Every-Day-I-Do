package com.doing.in2019.in06.in12;

public class ReadMe {

	/**
	 * Jolt - 软件业的奥斯卡
	 * 		评语：
	 * 			获得Jolt大奖的图书，都是作者们从平凡、重复、不起眼的日常开发实践中，总结的。
	 * 			所涉及的主题，都是普通软件开发人员每天面对的工作--代码阅读、撰写测试用例、修复软件问题等。
	 * 			但是这种貌似平淡无奇的工作，是否每一天，每一个项目都做好，着实拉开了开发人员的素质，也决定了软件企业开发出来的产品和服务的质量。
	 * 			“把简单的事千万次的做好，就是不简单的”，本套丛书建立在脚踏实地的实践基础上。
	 * 
	 * 
	 * 《面向对象分析与设计》
	 * 		软件的本质是什么？
	 * 			
	 * 			从不同角度看有不同的答案。有人认为是程序加文档，有人认为是人机交互，有人认为是增删改查，有人认为是抽象模型，有人认为是算法....
	 * 			PS：不论软件硬件，我个人理解是数据的处理黑匣子。软件用户的点击、输入输出；硬件传感器的输入信号、控制器的输出指令；本质都是数据输入，处理，输出。
	 * 			PS：也可以理解为函数，不过单纯的函数没有内部状态，通过内部状态的不同，对于同样的输入，会给出不同的输出。
	 * 				闭包的概念，也就是一个函数加上相关的上下文环境状态。
	 * 				也可以看成是拥有内部状态的函数，相当于一个简单的对象，反过来说，对象可以看成是几个闭包，他们共享了内部状态。
	 * 
	 * 			书中答案，计算机科学的基石是图灵机抽象：一个输入集合，一个输出集合，一个内部状态集合，一个计算规则集合。
	 * 			这个抽象十分强大，可以认为奶牛是图灵机：吃的是草，挤的是奶。
	 * 								表达式是图灵机：操作数是输入，求值是输出。
	 * 								函数也是图灵机：参数是输入，返回值是输出。
	 * 			于是，变成或设计软件就是在通用图灵机的基础上，设计一个具体的图灵机。
	 * 			具体就是需要设计软件接受怎样的输入，设计软件内部的状态，设计表示计算规则的代码，设计软件的输出。
	 * 			PS：函数时编程就是建立在这个抽象的基础上，非常简单。。。。  给定一个输入集合，经过函数处理，给出一个输出集合。
	 * 			PS：流行的架构设计模式Map-Reduce等等：一个计算集群仍然是一个图灵机。
	 * 
	 * 			总而言之，就是对问题的抽象（建模）（集合）（是这个意思就行）。
	 * 			同时，如无必要，勿增实体！最容易导致的问题就是创建太多不必要的抽象。
	 * 
	 * 			具体的实例，“名词动词法” ：你想吃苹果吗？苹果就是一个抽象，它隐藏了苹果实现的很多细节。名词是结构或存在的抽象，动词时行为或过程的抽象。
	 * 
	 * 		
	 * 		一、复杂性
	 * 			系统越复杂，越容易全面崩溃！
	 * 			
	 * 			研究复杂的系统，最好先学习其他复杂的东西是如何组织的。
	 * 
	 * 			以计算机来说，由主要部件组成：CPU、显示器、硬盘等等，可以任取一个部件继续进行分解。
	 * 			得出结论：复杂系统具有层次化特征！每一个抽象层都可以发现一组设备，相互协作为更高的抽象层提供服务。
	 * 			PS：或者叫模块化？高级模块化？
	 * 
	 * 			以植物进行抽象：包含根茎叶三种主要结构，根负责从土壤吸收水分和矿物质；根茎交互；茎将这些原材料输送到叶子；叶子利用茎输送的水分和矿物质，通过光合作用制造养料！
	 * 			抽象层的边界很清晰！交互之间的关注点清晰的分离！
	 * 			
	 * 			以动物进行抽象：一些细胞构成组织，几种组织协作构成了器官，一组器官构成了系统（消化系统）。等等
	 * 
	 * 			而动植物的共性都是细胞构成！跨领域的共性。而且细胞之上的机制也有共性，比如动植物都利用某种脉管系统传输养料！
	 * 
	 * 			引申出概念：
	 * 				“突显行为”，即整体行为大于部分行为之和。 -- 复杂性科学
	 * 
	 * 			其他复杂的系统：
	 * 				还有天文学的星星、恒星、恒星系、星团、星系；
	 * 				物理的夸克、质子、原子、分子；	
	 * 				办公室、分支结构、部门、子公司、跨国公司；复杂的社会结构等等
	 * 
	 * 			
	 * 			“工业级开发”定义：
	 * 				排除个人开发的有限软件来说，“工业级开发”，时间和空间都是稀有资源。
	 * 				特征是：单个开发者要理解其设计的所有方面非常困难。
	 * 
	 * 			大型软件复杂性的4个原因：
	 * 				1.问题域的复杂性
	 * 					比如自动化机器人，除了系统的基本功能需求，可用性、性能、成本、健壮性、可靠性等等非功能性需求，通常都有无限的外部复杂性！这种复杂性通常源于用户和开发者的“沟通困难”。
	 * 					解决方案---需求分析，还有抽象建模这一类型为。
	 * 				2.管理开发过程的困难性
	 * 					比如一个大型的系统需要几十万到几百万行高级语言开发的代码，这需要更多的开发者，而且有些开发团队地理分散，对于开发团队来说，主要的管理挑战总是在维持设计的一致性和完整性。
	 * 					解决方案---开发规范和统一的工作流。
	 * 				3.通过软件可能实现的复杂性
	 * 					比如建筑行业不会自己伐木，自己建钢铁厂，还对原材料的品质有着统一的编码和标准。但是软件行业很少有这种标准，结果软件行业还是一种劳动密集型产业。
	 * 					解决方案---
	 * 				4.刻画离散系统行为的问题
	 * 					现实中向空中抛球，人们可以预测出球的路径，还可以判断用力大小，因为正常情况下会有某些物理规律起作用，不会出现球飞到一半时突然向上冲，但是模拟球运动的软件常常这样。
	 * 					解决方案---
	 * 
	 * 			复杂系统的5个属性：
	 * 				
	 * 		
	 * 
	 * 
	 * 
	 */
}